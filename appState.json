{"EDITOR_STATE":{"allProjectFiles":{"02f1b6c6-d665-41f4-8eb6-b896b0e17b22":{"id":"02f1b6c6-d665-41f4-8eb6-b896b0e17b22","parent":null,"name":"S3-Batch-Process","type":"DIRECTORY","isDirectory":true,"children":["e62ed3a8-5a18-4652-a0fe-59748d4e85be"],"isRemovable":false,"filePath":"S3-Batch-Process"},"e62ed3a8-5a18-4652-a0fe-59748d4e85be":{"id":"e62ed3a8-5a18-4652-a0fe-59748d4e85be","parent":"02f1b6c6-d665-41f4-8eb6-b896b0e17b22","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"S3-Batch-Process/lambda.js","code":"let AWS = require('aws-sdk');\nconst sns = new AWS.SNS();\nconst s3 = new AWS.S3();\nexports.handler = function (event, context, callback) {\n\n\tconsole.log(`Batch process triggered at ${event.time}`);\n\n\ts3.listObjects({\n\t\t'Bucket': 'batch-process-bucket-udith',\n\t\t'MaxKeys': 100,\n\t\t'Prefix': ''\n\t}).promise()\n\t\t.then(data => {\n\t\t\tlet numFiles = data.Contents.length;\n\t\t\tlet successCount = 0;\n\t\t\tlet failedCount = 0;\n\n\t\t\tconsole.log(`${numFiles} files found to process`);\n\n\t\t\tif (numFiles === 0) {\n\t\t\t\t// There are no files to process. So notify that.\n\t\t\t\texports.sendNotification(\n\t\t\t\t\t'Processing Finished',\n\t\t\t\t\t'No files found to be processed',\n\t\t\t\t\t() => callback(null, \"Processing finished without any files & Notification sent\"),\n\t\t\t\t\t(err) => callback(err, \"Processing finished without any files & Notification failed\"));\n\t\t\t}\n\n\t\t\t// For each file, execute the processing\n\t\t\tdata.Contents.forEach(file => {\n\t\t\t\tlet fileName = file.Key;\n\n\t\t\t\tconsole.log(`Processing File : ${fileName}`);\n\t\t\t\t// CUSTOM PROCESSING LOGIC GOES HERE\n\n\t\t\t\t// After the processing, delete the file\n\n\t\t\t\ts3.deleteObject({\n\t\t\t\t\t'Bucket': \"batch-process-bucket-udith\",\n\t\t\t\t\t'Key': fileName\n\t\t\t\t}).promise()\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tconsole.log(`Successfully deleted file ${fileName}`);\n\t\t\t\t\t\tsuccessCount++;\n\n\t\t\t\t\t\tif ((successCount + failedCount) === numFiles) {\n\t\t\t\t\t\t\t// This is the last file. So send the notification.\n\t\t\t\t\t\t\tlet message = `Processing finished. ${successCount} successful and ${failedCount} failed`;\n\n\t\t\t\t\t\t\texports.sendNotification(\n\t\t\t\t\t\t\t\t'Processing Finished',\n\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t() => callback(null, \"Processing finished & Notification sent\"),\n\t\t\t\t\t\t\t\t(err) => callback(err, \"Processing finished & Notification failed\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tconsole.log(`Failed to delete file : ${fileName}`, err, err.stack);\n\t\t\t\t\t\tfailedCount++;\n\n\t\t\t\t\t\tif ((successCount + failedCount) === numFiles) {\n\t\t\t\t\t\t\t// This is the last file. So send the notification.\n\t\t\t\t\t\t\tlet message = `Processing finished. ${successCount} successful and ${failedCount} failed`;\n\n\t\t\t\t\t\t\texports.sendNotification(\n\t\t\t\t\t\t\t\t'Processing Finished',\n\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t() => callback(null, \"Processing finished & Notification sent\"),\n\t\t\t\t\t\t\t\t(err) => callback(err, \"Processing finished & Notification failed\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(\"Failed to get file list\", err, err.stack); // an error occurred\n\t\t\tlet message = `Message processing failed due to : ${err}`;\n\n\t\t\texports.sendNotification(\n\t\t\t\t'Processing Failed',\n\t\t\t\tmessage,\n\t\t\t\t() => callback(err, \"Failed to get file list\"),\n\t\t\t\t(err1) => callback(err, \"Failed to get file list\"));\n\t\t});\n}\n\n/* \nThis function publishes the provided message with subject to the notification\ntopic and excute the provided onSuccess or onFailure callback handler \n*/\nexports.sendNotification = (subject, message, onSuccess, onFailure) => {\n\tsns.publish({\n\t\tMessage: message,\n\t\tSubject: subject,\n\t\tMessageAttributes: {},\n\t\tMessageStructure: 'String',\n\t\tTopicArn: 'arn:aws:sns:us-east-1:YOUR_ACCOUNT_ID:batch-process-notify'\n\t}).promise()\n\t\t.then(data => {\n\t\t\tconsole.log(\"Successfully published notification\");\n\t\t\tonSuccess();\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(\"Error occurred while publishing notification\", err, err.stack);\n\t\t\tonFailure(err);\n\t\t});\n\n}","triggers":[{"resourceName":"cweBatchProcessTrigger","config":{}}],"version":3}},"rootNode":"02f1b6c6-d665-41f4-8eb6-b896b0e17b22","openFiles":["e62ed3a8-5a18-4652-a0fe-59748d4e85be"],"currentFileId":"e62ed3a8-5a18-4652-a0fe-59748d4e85be","resources":{"cweBatchProcessTrigger":{"name":"cweBatchProcessTrigger","type":"CLOUD_WATCH","config":{"mode":0,"name":"BatchProcessTrigger","description":"","scheduleExpression":"rate(1 hour)"},"globallyEditable":true},"s3batchProcessBucketUdith":{"name":"s3batchProcessBucketUdith","type":"S3","config":{"mode":0,"bucket":{"region":"us-east-1","name":"batch-process-bucket-udith"}},"globallyEditable":false},"snsusEast1batchProcessNotify":{"name":"snsusEast1batchProcessNotify","type":"SNS","config":{"topicMode":0,"topicName":"batch-process-notify","topicArn":"arn:aws:sns:us-east-1:YOUR_ACCOUNT_ID:batch-process-notify","topicRegion":"us-east-1","snsType":0,"topicDisplayName":"notify","subscriptions":[]},"globallyEditable":true}},"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"slappforge-sdk":{"name":"@slappforge/slappforge-sdk","version":"0.0.3","notRemovable":true,"types":"\n                    declare class RDSQueryParams {\n    instanceIdentifier: string;\n    query: string;\n    inserts: Array<any>\n}\n\ndeclare namespace SL.AWS {\n    class RDS {\n        query(params: RDSQueryParams, callback: Function, connection: any): void;\n\n        beginTransaction(params: any, callback: Function): void;\n    }\n\n    class SQS {\n        receiveAndDeleteMessages(params: any, filteringCallBack: Function, deleteCallBack: Function, errorCallBack: Function): void;\n    }\n}\n"}}},"lambdaId":"e62ed3a8-5a18-4652-a0fe-59748d4e85be","additionalFiles":[]},"PROJECT_META":{"projectName":"S3-Batch-Process","projectDescription":"","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"S3-Batch-Process","repoUrl":"https://github.com/sigmaidetest/S3-Batch-Process","lastSave":1519116355886}}